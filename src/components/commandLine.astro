---
const name = "josh";
---

<section>
  <p id="username">{name}@<span id="browser-info"></span> |</p>
  <input id="terminal-input" type="text" />
</section>

<p id="browser-info"></p>

<style>
  section {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 20px;
    padding: 5px;
    border-radius: var(--border-radius);
    background-color: white;
    border: 1px solid black;
  }

  p {
    font-family: var(--monospace-font-family);
    font-size: 20px;
  }

  #username {
    color: rgb(0, 0, 0);
  }

  #browser-info {
    font-size: 20px;
    font-weight: 500;
  }

  #terminal-input {
    background: none;
    border: none;
    font-family: var(--monospace-font-family);
    font-size: 20px;
    color: var(--text-color);
    width: 750px;
  }

  #terminal-input:focus {
    border: none;
    outline: none;
  }

  @media only screen and (max-width: 1200px) {
    section {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  ul li a:hover {
    background-color: var(--card-item-hover-background-color) !important;
    transform: scale(1.03) !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
    opacity: 1 !important;
    filter: none !important;
  }
</style>

<p id="browser-info"></p>

<script>
  const name = "Josh";

  // Initialize browser info
  function initializeBrowserInfo() {
    const p = document.getElementById("browser-info");
    const userAgent = navigator.userAgent;
    let browser = "unknown";

    if (userAgent.includes("Chrome")) {
      browser = "chrome";
    } else if (userAgent.includes("Firefox")) {
      browser = "zen";
    }

    p.textContent = "home";
  }

  // Typing effect for placeholder
  function typePlaceholder(input, examples, typingSpeed = 50) {
    let exampleIndex = 0;
    let charIndex = 0;

    function type() {
      if (charIndex < examples[exampleIndex].length) {
        input.placeholder += examples[exampleIndex].charAt(charIndex);
        charIndex++;
        setTimeout(type, typingSpeed);
      } else {
        setTimeout(() => {
          input.placeholder = "";
          charIndex = 0;
          exampleIndex = (exampleIndex + 1) % examples.length;
          type();
        }, 2000);
      }
    }

    type();
  }

  const styleTag = document.createElement("style");
  styleTag.textContent = `
  .bookmark-match {
    opacity: 1 !important;
    filter: brightness(1.3) !important;
    transform: scale(1.02) !important;
    transition: all 0.2s ease !important;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.8) !important;
  }

  .bookmark-nomatch {
    opacity: 0.3 !important;
    filter: grayscale(80%) !important;
    transform: scale(0.97) !important;
    transition: all 0.3s ease !important;
  }

  .bookmark-nomatch-parent {
    text-decoration: line-through !important;
  }

  /* Ensure hover effects always take priority */
  ul li a:hover {
    background-color: var(--card-item-hover-background-color) !important;
    transform: scale(1.03) !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
    opacity: 1 !important;
    filter: none !important;
  }
`;
  document.head.appendChild(styleTag);

  // Reset styles for all elements
  function resetStyles(elements) {
    elements.forEach((element) => {
      element.classList.remove("bookmark-match", "bookmark-nomatch");
      element.parentElement.classList.remove("bookmark-nomatch-parent");
      element.style.mixBlendMode = ""; // Reset mixBlendMode
    });
  }

  // Handle input events
  function handleInput(input, elements) {
    input.addEventListener("input", () => {
      const value = input.value.toLowerCase();

      if (value === "") {
        resetStyles(elements);
        return;
      }

      elements.forEach((element) => {
        const text = element.textContent.toLowerCase();
        const isMatch = text.includes(value.replace(/^r:|^s:|^m:/, ""));

        element.classList.toggle("bookmark-match", isMatch);
        element.classList.toggle("bookmark-nomatch", !isMatch);
        element.parentElement.classList.toggle(
          "bookmark-nomatch-parent",
          !isMatch,
        );

        // Set mixBlendMode based on match
        if (value === "") {
          element.style.mixBlendMode = "";
        } else if (isMatch) {
          element.style.mixBlendMode = "";
        } else {
          element.style.mixBlendMode = "color-burn";
        }
      });
    });

    // Reset styles when input is cleared or focus is lost
    input.addEventListener("blur", function () {
      if (input.value === "") {
        resetStyles(elements);
      }
    });
  }

  // Handle keyboard events
  function handleKeyboardEvents(input, elements) {
    const commandHistory = [];
    let historyIndex = -1;

    input.addEventListener("keydown", (event) => {
      const value = input.value.toLowerCase();

      // Ctrl+C to clear and reset
      if (event.ctrlKey && event.key === "c") {
        input.value = "";
        resetStyles(elements);
        return;
      }

      // Arrow keys for command history
      if (event.key === "ArrowUp" && historyIndex > 0) {
        historyIndex--;
        input.value = commandHistory[historyIndex];
      } else if (
        event.key === "ArrowDown" &&
        historyIndex < commandHistory.length - 1
      ) {
        historyIndex++;
        input.value = commandHistory[historyIndex];
      } else if (event.key === "Enter") {
        handleEnterKey(value, elements, commandHistory);
        historyIndex = commandHistory.length;
      }
    });
  }

  // Handle Enter key press
  function handleEnterKey(value, elements, commandHistory) {
    let matchFound = false;

    elements.forEach((element) => {
      if (value === "") return;

      if (
        element.textContent
          .toLowerCase()
          .includes(value.replace(/^r:|^s:|^m:/, ""))
      ) {
        window.location.href = element.href;
        matchFound = true;
      }
    });

    if (!matchFound) {
      handleSpecialCommands(value);
    }

    if (value.trim() !== "") {
      commandHistory.push(value.trim());
    }
  }

  // Handle special commands
  async function handleSpecialCommands(value) {
    if (value.startsWith("r:")) {
      window.location.href = `https://google.com/search?q=site:reddit.com ${value.replace("r:", "")}`;
    } else if (value.startsWith("m:")) {
      window.location.href = `https://google.com/search?q=site:myanimelist.net ${value.replace("m:", "")}`;
    } else if (value.startsWith("i:")) {
      window.location.href = `https://www.google.com/search?tbm=isch&q=${value.replace("i:", "")}`;
    } else if (value.startsWith("y:")) {
      window.location.href = `https://www.youtube.com/results?search_query=${value.replace("y:", "")}`;
    } else if (value.startsWith("a:")) {
      const query = value.replace("a:", "").trim();
      try {
        // Get search results AND AI recommendation
        const res = await fetch(
          `/api/aiSearch?q=${encodeURIComponent(query)}&results=true`,
        );
        if (!res.ok) throw new Error(`Server error: ${res.status}`);
        const data = await res.json();

        if (data.result && data.result.startsWith("http")) {
          // Directly go to the AI's chosen URL
          window.location.href = data.result;
        } else {
          // Fallback to Google search with AI's suggestion
          window.location.href = `https://google.com/search?q=${encodeURIComponent(data.result || query)}`;
        }
      } catch (error) {
        console.error("Error fetching AI result:", error);
        alert("AI search failed!");
      }
    } else {
      const words = value.split(".");
      if (words.length >= 2) {
        window.location.href = `http://${value}`;
      } else {
        window.location.href = `https://google.com/search?q=${value}`;
      }
    }
  }

  // Initialize the terminal
  function initializeTerminal() {
    const input = document.getElementById("terminal-input");
    const examples = [
      "how to tie a tie?",
      "today's weather",
      "search on reddit with r:query",
      "search stackoverflow with s:query",
      "make the terminal great again",
      "hey sexy! wanna kill all humans?",
      "press ctrl+c to clear",
      "Bunu okuyan gaydÄ±r.",
    ];

    const elements = document.querySelectorAll("a");

    initializeBrowserInfo();
    typePlaceholder(input, examples);
    handleInput(input, elements);
    handleKeyboardEvents(input, elements);
    resetStyles(elements);

    // Automatically focus the input when the page loads
    input.focus();

    // Focus the input when any key is pressed
    document.addEventListener("keydown", () => input.focus());

    // Reset styles when the page loads
    document.addEventListener("DOMContentLoaded", function () {
      resetStyles(elements);
    });
  }

  // Run the terminal initialization
  document.addEventListener("DOMContentLoaded", initializeTerminal);
</script>
